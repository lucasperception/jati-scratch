#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

// this would be for automatically filling in the code during build time
// but i dont wanna install the libs locally but still need to make rust_analyzer
// happy somehow so i just copied them by hand from the build container
// include!(concat!(env!("OUT_DIR"), "/bindings.rs"));

/* automatically generated by rust-bindgen 0.71.1 */

pub type corax_state_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct corax_msa_s {
    pub count: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub sequence: *mut *mut ::std::os::raw::c_char,
    pub label: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of corax_msa_s"][::std::mem::size_of::<corax_msa_s>() - 24usize];
    ["Alignment of corax_msa_s"][::std::mem::align_of::<corax_msa_s>() - 8usize];
    ["Offset of field: corax_msa_s::count"][::std::mem::offset_of!(corax_msa_s, count) - 0usize];
    ["Offset of field: corax_msa_s::length"][::std::mem::offset_of!(corax_msa_s, length) - 4usize];
    ["Offset of field: corax_msa_s::sequence"]
        [::std::mem::offset_of!(corax_msa_s, sequence) - 8usize];
    ["Offset of field: corax_msa_s::label"][::std::mem::offset_of!(corax_msa_s, label) - 16usize];
};
pub type corax_msa_t = corax_msa_s;
#[doc = " A structure that contains attributes of a multiple sequence alignment."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct corax_msa_features {
    #[doc = " Number of taxa in the alignment."]
    pub taxa: ::std::os::raw::c_int,
    #[doc = " Number of sites in the alignment."]
    pub sites: ::std::os::raw::c_int,
    #[doc = " Number of patterns in the alignment."]
    pub patterns: ::std::os::raw::c_int,
    #[doc = " Sites per taxa ratio of the alignment."]
    pub sites_per_taxa: f64,
    #[doc = " Patterns per taxa ratio of the alignment."]
    pub patterns_per_taxa: f64,
    #[doc = " Patterns per site ratio of the alignment."]
    pub patterns_per_site: f64,
    #[doc = " The proportion of gaps in the alignment."]
    pub proportion_gaps: f64,
    #[doc = " The proportion of invariant sites in the alignment."]
    pub proportion_invariant: f64,
    #[doc = " Shannon entropy of the alignment."]
    pub entropy: f64,
    #[doc = " Entropy like metric based on the number and frequency of patterns in the alignment"]
    pub pattern_entropy: f64,
    #[doc = " Bollback multinomial statsitics of the alignment.\n Computed according to Bollback, JP: Bayesian model adequacy and choice in\n phylogenetics (2002)."]
    pub bollback_multinomial: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of corax_msa_features"][::std::mem::size_of::<corax_msa_features>() - 80usize];
    ["Alignment of corax_msa_features"][::std::mem::align_of::<corax_msa_features>() - 8usize];
    ["Offset of field: corax_msa_features::taxa"]
        [::std::mem::offset_of!(corax_msa_features, taxa) - 0usize];
    ["Offset of field: corax_msa_features::sites"]
        [::std::mem::offset_of!(corax_msa_features, sites) - 4usize];
    ["Offset of field: corax_msa_features::patterns"]
        [::std::mem::offset_of!(corax_msa_features, patterns) - 8usize];
    ["Offset of field: corax_msa_features::sites_per_taxa"]
        [::std::mem::offset_of!(corax_msa_features, sites_per_taxa) - 16usize];
    ["Offset of field: corax_msa_features::patterns_per_taxa"]
        [::std::mem::offset_of!(corax_msa_features, patterns_per_taxa) - 24usize];
    ["Offset of field: corax_msa_features::patterns_per_site"]
        [::std::mem::offset_of!(corax_msa_features, patterns_per_site) - 32usize];
    ["Offset of field: corax_msa_features::proportion_gaps"]
        [::std::mem::offset_of!(corax_msa_features, proportion_gaps) - 40usize];
    ["Offset of field: corax_msa_features::proportion_invariant"]
        [::std::mem::offset_of!(corax_msa_features, proportion_invariant) - 48usize];
    ["Offset of field: corax_msa_features::entropy"]
        [::std::mem::offset_of!(corax_msa_features, entropy) - 56usize];
    ["Offset of field: corax_msa_features::pattern_entropy"]
        [::std::mem::offset_of!(corax_msa_features, pattern_entropy) - 64usize];
    ["Offset of field: corax_msa_features::bollback_multinomial"]
        [::std::mem::offset_of!(corax_msa_features, bollback_multinomial) - 72usize];
};
unsafe extern "C" {
    #[doc = " Takes a multiple sequence alignment, the number of states and a tipmap and\n computes the MSA attributes and collects them in a corax_msa_features\n object.\n\n @param msa Multiple Sequence Alignment. Note that the MSA object is\n modified during the computation of the Bollback multinomial statistic.\n @param states Number of states (e.g., DNA=4, AA=20 etc.)\n @param tipmap Mapping from chars to states (e.g., corax_map_nt for DNA)\n @return corax_msa_features struct containing the MSA attributes"]
    pub fn corax_msa_compute_features(
        msa: *mut corax_msa_t,
        states: ::std::os::raw::c_uint,
        tipmap: *const corax_state_t,
    ) -> *mut corax_msa_features;
}
unsafe extern "C" {
    #[doc = " Predicts the difficulty of a MSA given its features and\n the average RF Distance between a set of parsimony trees for the same MSA.\n\n @param msa_features The features of the multiple sequence alignment.\n @param average_rfdistance_parsimony_trees The RF distance between a set of\n parsimony trees inferred for the MSA.\n @param proportion_unique_parsimony_tree_topologies Proportion of unique\n topologies for a set of parsimony trees inferred for the MSA. E.g. for 100\n parsimony trees with 60 distinct topologies this is 60/100 = 0.6\n @return The predicted difficulty for the given MSA. The difficulty is a\n value between 0.0 and 1.0."]
    pub fn corax_msa_predict_difficulty(
        msa_features: *const corax_msa_features,
        average_rfdistance_parsimony_trees: f64,
        proportion_unique_parsimony_tree_topologies: f64,
    ) -> f64;
}
