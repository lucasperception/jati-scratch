#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

// this would be for automatically filling in the code during build time
// but i dont wanna install the libs locally but still need to make rust_analyzer
// happy somehow so i just copied them by hand from the build container
// include!(concat!(env!("OUT_DIR"), "/bindings.rs"));

/* automatically generated by rust-bindgen 0.71.1 */

pub const CORAX_FALSE: u32 = 0;
pub const CORAX_TRUE: u32 = 1;
pub type corax_state_t = ::std::os::raw::c_ulonglong;
pub type corax_bool_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct corax_unode_s {
    pub label: *mut ::std::os::raw::c_char,
    pub length: f64,
    pub node_index: ::std::os::raw::c_uint,
    pub clv_index: ::std::os::raw::c_uint,
    pub scaler_index: ::std::os::raw::c_int,
    pub pmatrix_index: ::std::os::raw::c_uint,
    pub next: *mut corax_unode_s,
    pub back: *mut corax_unode_s,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of corax_unode_s"][::std::mem::size_of::<corax_unode_s>() - 56usize];
    ["Alignment of corax_unode_s"][::std::mem::align_of::<corax_unode_s>() - 8usize];
    ["Offset of field: corax_unode_s::label"]
        [::std::mem::offset_of!(corax_unode_s, label) - 0usize];
    ["Offset of field: corax_unode_s::length"]
        [::std::mem::offset_of!(corax_unode_s, length) - 8usize];
    ["Offset of field: corax_unode_s::node_index"]
        [::std::mem::offset_of!(corax_unode_s, node_index) - 16usize];
    ["Offset of field: corax_unode_s::clv_index"]
        [::std::mem::offset_of!(corax_unode_s, clv_index) - 20usize];
    ["Offset of field: corax_unode_s::scaler_index"]
        [::std::mem::offset_of!(corax_unode_s, scaler_index) - 24usize];
    ["Offset of field: corax_unode_s::pmatrix_index"]
        [::std::mem::offset_of!(corax_unode_s, pmatrix_index) - 28usize];
    ["Offset of field: corax_unode_s::next"][::std::mem::offset_of!(corax_unode_s, next) - 32usize];
    ["Offset of field: corax_unode_s::back"][::std::mem::offset_of!(corax_unode_s, back) - 40usize];
    ["Offset of field: corax_unode_s::data"][::std::mem::offset_of!(corax_unode_s, data) - 48usize];
};
pub type corax_unode_t = corax_unode_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct corax_utree_s {
    pub tip_count: ::std::os::raw::c_uint,
    pub inner_count: ::std::os::raw::c_uint,
    pub edge_count: ::std::os::raw::c_uint,
    pub binary: ::std::os::raw::c_int,
    pub nodes: *mut *mut corax_unode_t,
    pub vroot: *mut corax_unode_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of corax_utree_s"][::std::mem::size_of::<corax_utree_s>() - 32usize];
    ["Alignment of corax_utree_s"][::std::mem::align_of::<corax_utree_s>() - 8usize];
    ["Offset of field: corax_utree_s::tip_count"]
        [::std::mem::offset_of!(corax_utree_s, tip_count) - 0usize];
    ["Offset of field: corax_utree_s::inner_count"]
        [::std::mem::offset_of!(corax_utree_s, inner_count) - 4usize];
    ["Offset of field: corax_utree_s::edge_count"]
        [::std::mem::offset_of!(corax_utree_s, edge_count) - 8usize];
    ["Offset of field: corax_utree_s::binary"]
        [::std::mem::offset_of!(corax_utree_s, binary) - 12usize];
    ["Offset of field: corax_utree_s::nodes"]
        [::std::mem::offset_of!(corax_utree_s, nodes) - 16usize];
    ["Offset of field: corax_utree_s::vroot"]
        [::std::mem::offset_of!(corax_utree_s, vroot) - 24usize];
};
pub type corax_utree_t = corax_utree_s;
unsafe extern "C" {
    pub fn corax_utree_destroy(
        tree: *mut corax_utree_t,
        cb_destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
pub type corax_split_base_t = ::std::os::raw::c_uint;
pub type corax_split_t = *mut corax_split_base_t;
unsafe extern "C" {
    pub fn corax_utree_split_create(
        tree: *const corax_unode_t,
        tip_count: ::std::os::raw::c_uint,
        split_to_node_map: *mut *mut corax_unode_t,
    ) -> *mut corax_split_t;
}
unsafe extern "C" {
    pub fn corax_utree_split_destroy(split_list: *mut corax_split_t);
}
unsafe extern "C" {
    pub fn corax_utree_split_rf_distance(
        s1: *const corax_split_t,
        s2: *const corax_split_t,
        tip_count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn corax_utree_create_parsimony(
        taxon_count: ::std::os::raw::c_uint,
        seq_length: ::std::os::raw::c_uint,
        names: *const *const ::std::os::raw::c_char,
        sequences: *const *const ::std::os::raw::c_char,
        site_weights: *const ::std::os::raw::c_uint,
        map: *const corax_state_t,
        states: ::std::os::raw::c_uint,
        attributes: ::std::os::raw::c_uint,
        random_seed: ::std::os::raw::c_uint,
        score: *mut ::std::os::raw::c_uint,
    ) -> *mut corax_utree_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct corax_msa_s {
    pub count: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub sequence: *mut *mut ::std::os::raw::c_char,
    pub label: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of corax_msa_s"][::std::mem::size_of::<corax_msa_s>() - 24usize];
    ["Alignment of corax_msa_s"][::std::mem::align_of::<corax_msa_s>() - 8usize];
    ["Offset of field: corax_msa_s::count"][::std::mem::offset_of!(corax_msa_s, count) - 0usize];
    ["Offset of field: corax_msa_s::length"][::std::mem::offset_of!(corax_msa_s, length) - 4usize];
    ["Offset of field: corax_msa_s::sequence"]
        [::std::mem::offset_of!(corax_msa_s, sequence) - 8usize];
    ["Offset of field: corax_msa_s::label"][::std::mem::offset_of!(corax_msa_s, label) - 16usize];
};
pub type corax_msa_t = corax_msa_s;
unsafe extern "C" {
    pub fn corax_fasta_load(fname: *const ::std::os::raw::c_char) -> *mut corax_msa_t;
}
unsafe extern "C" {
    pub static corax_map_nt: [corax_state_t; 256usize];
}
unsafe extern "C" {
    pub fn corax_msa_destroy(msa: *mut corax_msa_t);
}
unsafe extern "C" {
    pub fn corax_phylip_load(
        fname: *const ::std::os::raw::c_char,
        interleaved: corax_bool_t,
    ) -> *mut corax_msa_t;
}
